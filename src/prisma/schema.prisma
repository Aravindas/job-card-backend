generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email String  @unique
  password String
  status Boolean?
  token String?
  role String?
  materialProduction MaterialProduction[]
  materialFiling MaterialFiling[]
  shiftId Int @map("shift_id")
  shift Shift @relation(fields: [shiftId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id Int @id @default(autoincrement())
  clientName String @map("client_name")
  status Boolean?
  address ClientAddress[]
  MaterialInward MaterialInward[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model ClientAddress {
  id Int @id @default(autoincrement())
  clientId Int @map("client_id")
  client Client @relation(fields: [clientId],references: [id])
  email String?
  contact String
  address String?
  area String?
  city String?
  pincode String?
  contactPersonName String? @map("contact_person_name")
  contactPersonContact String? @map("contact_person_contact")
  description String?
  status Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_address") 
}

model MaterialInward {
  id Int @id @default(autoincrement())
  clientId Int @map("client_id")
  client Client @relation(fields: [clientId],references: [id])
  quantity Int
  noOfMaterials Int @map("no_of_materials") 
  dcNumber String? @map("dc_number") 
  dcImage String? @map("dc_image")
  receivedDate DateTime @map("received_date")
  estimatedDispatchDate DateTime @map("estimated_dispatch_date")
  coatingRequired String? @map("coating_required")
  inspection String? 
  isQtyApproved Int? @map("is_qty_approved")
  rejectionReason String? @map("rejection_reason")
  jobId String? @map("job_id")
  jobTypeId Int @map("job_type_id")
  jobType JobType @relation(fields: [jobTypeId],references: [id])
  jobStatus String? @map("job_status")
  status Boolean?
  materialInwardDetails MaterialInwardDetails[]
  materialProduction MaterialProduction[]
  materialFiling MaterialFiling[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("material_inward")
}

model MaterialInwardDetails{
  id Int @id @default(autoincrement())
  materialInwardId Int @map("material_inward_id")
  materialInward MaterialInward @relation(fields: [materialInwardId],references: [id])
  material String
  thickness String
  
  @@map("material_inward_details")
}


model MaterialProduction{
  id Int @id @default(autoincrement())
  materialInwardId Int @map("material_inward_id")
  materialInward MaterialInward @relation(fields: [materialInwardId],references: [id])
  receivedQty Int? @map("received_qty")
  balanceQty Int? @map("balance_qty")
  completedQty Int? @map("completed_qty")
  assignedFloor String? @map("assigned_floor")
  assignedShift String? @map("assigned_shift")
  date String?
  shiftIncharge Int @map("shift_incharge")
  user User @relation(fields: [shiftIncharge],references: [id])
  remarks String?
  requiredCoating String? @map("required_coating")
  achivedCoating String? @map("achived_coating")
  zincStartingLevel String? @map("zinc_starting_level")
  zincEndingLevel String? @map("zinc_ending_level")
  status Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("material_production")
}

model MaterialFiling{
  id Int @id @default(autoincrement())
  materialInwardId Int @map("material_inward_id")
  materialInward MaterialInward @relation(fields: [materialInwardId],references: [id])
  receivedQty Int? @map("received_qty")
  balanceQty Int? @map("balance_qty")
  completedQty Int? @map("completed_qty")
  assignedFloor String? @map("assigned_floor")
  assignedShift String? @map("assigned_shift")
  date String?
  shiftIncharge Int @map("shift_incharge")
  user User @relation(fields: [shiftIncharge],references: [id])
  remarks String?
  contractor String?
  status Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    
  @@map("material_filing")
}

model Floor{
  id Int @id @default(autoincrement())
  name String
  status Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("floor")
}

model Shift{
  id Int @id @default(autoincrement())
  name String
  status Boolean?
  user User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shift")
}

model JobType{
  id Int @id @default(autoincrement())
  name String
  status Boolean?
  materialInward MaterialInward[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job_types")
}

model Unit{
  id Int @id @default(autoincrement())
  unit String
  status Boolean?
  Material Material[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("units")
}

model Material{
  id Int @id @default(autoincrement())
  name String
  unitId Int @map("unit_id")
  unit Unit @relation(fields: [unitId],references: [id])
  type String?
  color String?
  status Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("material")
}













